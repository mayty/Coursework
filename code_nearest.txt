int dir; 1 - up, 2 - down, 3 - left, 4 - right
int x
int y
int nx
int ny
int lx
int ly
int has_pos

proc main
main_loop:
	call get_dir
	cmp dir 1
	je move_up
	cmp dir 2
	je move_down
	cmp dir 3
	je move_left
	cmp dir 4
	je move_right

	move_up:
	moveUp
	cmp 1 1
	je main_loop
	move_down:
	moveDown
	cmp 1 1
	je main_loop
	move_left:
	moveLeft
	cmp 1 1
	je main_loop
	move_right:
	moveRight
	jmp main_loop
ret


proc get_dir
	get_dir_start:
	call get_target
	cmp x player_x
	je get_dir_y
	jb get_dir_left
	ja get_dir_right
	get_dir_left:
	push 3
	pop dir
	ret
	get_dir_right:	
	push 4
	pop dir
	ret

	get_dir_y:
	cmp y player_y
	ja get_dir_down
	jb get_dir_up
	push 0
	pop has_pos
	jmp get_dir_start
	
	get_dir_up:
	push 1
	pop dir
	ret
	get_dir_down:	
	push 2
	pop dir
	ret
ret

int has_inited
proc get_target
	cmp has_pos 1
	je get_target_end
	push 0
	pop has_inited
	int buf
	sub field_width 1
	get_target_loop_x:
		push stack
		pop buf
		sub field_height 1
		get_target_loop_y:
			map buf stack
			cmp stack food
			je get_target_food
			cmp stackp destination
			ja get_target_nothing
			jb get_target_nothing
			get_target_dest:
			pop ly
			pop lx
			push lx
			push ly
			jmp get_target_nothing
			get_target_food:
			pop none; remove tile data
			pop ny
			pop nx
			push nx
			push ny
			push 1
			pop has_pos
			call check_if_init
			get_target_nothing:
			sub stackp 1
			cmp stack 0
			ja get_target_loop_y
			je get_target_loop_y		
		pop none; remove curr y coord
		sub stackp 1
		cmp stack 0
		ja get_target_loop_x
		je get_target_loop_x
	pop none; remove curr x coord
cmp has_pos 1
je get_target_end
push lx
pop x
push ly
pop y
push 1
pop has_pos
get_target_end:
ret

proc check_if_init
int diff
cmp has_inited 0
je check_if_init_yes

; get old diff
sub x player_x
call make_pos
sub y player_y
call make_pos
add stackp stackp

; get new diff
sub nx player_x
call make_pos
sub ny player_y
call make_pos
add stackp stackp

cmp stackp stackp
jb check_if_init_yes
ret

check_if_init_yes:
push 1
pop has_inited
push nx
pop x
push ny
pop y
ret

proc make_pos
cmp stack 0
jb make_pos_neg
jmp make_pos_end

make_pos_neg:
mul stackp -1

make_pos_end:
ret

















